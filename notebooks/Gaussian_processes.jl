### A Pluto.jl notebook ###
# v0.19.41

using Markdown
using InteractiveUtils

# ╔═╡ afaa8b50-e927-11ee-2cdb-0f9d4bca6f43
using DrWatson

# ╔═╡ 51d727e1-4227-46ca-abf7-38d404fc38ae
# ╠═╡ show_logs = false
quickactivate(@__DIR__)

# ╔═╡ e234d22e-ce9f-4635-90f5-1ce181b9dc2d
begin
	using DataFrames
	using CSV
	using DataSets
	using Statistics
	using StatsBase
	using KernelFunctions
	using SpatialOmicsGPs
	using GLMakie
end

# ╔═╡ 8200f68d-ca32-48aa-ad91-900d25c40bd6
md"# Gaussian process models for spatial transcriptomics

## Setup the environment

Activate the BINF301 environment and load packages:
"

# ╔═╡ d8fb1fbc-db6f-4b3e-b00c-1b868a56df75
md"""
## Load the data

Make sure that you have downloaded the data before running this notebook by executing the script `download_processed_data.jl` in the `scripts` folder. Information to load the data is stored in the `Data.toml` file, which needs to be loaded first:
"""

# ╔═╡ f19e865f-c104-4d77-b0df-57b06627177e
DataSets.load_project!(projectdir("Data.toml"))

# ╔═╡ e22b911d-5c61-4b2f-960c-473512a6e193
md"We will use both the `Mouse_hypothal_spatial` and `Mouse_olfact_bulb_spatial` datasets."

# ╔═╡ 189beda2-c089-4b75-873f-b8e41126d337
ds_mob = DataSets.open(dataset("Mouse_olfact_bulb_spatial"));

# ╔═╡ f6eef619-d242-4c1b-b5b0-b12ca752aae9
df_mob = open(Vector{UInt8}, ds_mob) do buf
           CSV.read(buf, DataFrame);
       end;

# ╔═╡ a250ec81-78f5-42d6-a697-9d18e60d6bf7
coord_mob=df_mob[:,1:2];

# ╔═╡ da42b12d-1fed-4e3a-8fe0-5c36c416eb66
expr_mob=df_mob[:,3:end];

# ╔═╡ b9704c0f-2e76-4f69-889a-d0ed3e6db01c
nsm, ngm = size(expr_mob);

# ╔═╡ cae5bfff-831e-4be5-894e-643f7c184f0d
ds_hyp = DataSets.open(dataset("Mouse_hypothal_spatial"));

# ╔═╡ 6fe8accc-c3b1-4856-afd1-803e53dd2dfe
# ╠═╡ show_logs = false
df_hyp = open(Vector{UInt8}, ds_hyp) do buf
           CSV.read(buf, DataFrame);
       end;

# ╔═╡ e250403d-a008-4f6a-89f7-cf321342331f
coord_hyp=df_hyp[:,1:2];

# ╔═╡ dc34a5b0-9708-4377-9ad1-318d15012b58
expr_hyp=df_hyp[:,5:end];

# ╔═╡ 53a46965-76d5-4861-8a21-cd4b62c9c6d2
nsh,ngh = size(expr_hyp);

# ╔═╡ 037a650b-b487-4672-af39-7861c8beb4f2
md"""
## SpatialDE analysis

Our analysis will follow the steps of the [SpatialDE paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6350895/). Users of python or R can try the [original implementation](https://github.com/Teichlab/SpatialDE). Here we will use a [Julia implementation](https://github.com/tmichoel/SpatialOmicsGPs.jl).
"""

# ╔═╡ 8bc22fb8-a852-44f6-8ade-101bb300b5eb
ns, ng = size(expr_mob);

# ╔═╡ b95f323a-9621-45c9-a21d-3d8b1dd006e1
md"""
### Mouse olfactory bulb data analysis

Our first analysis uses the same spatial transcriptomics data generated by [Ståhl et al. (2016)](https://doi.org/10.1126/science.aaf2403) that was also used in the [SpatialDE paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6350895/) paper. 

The data has gene expression counts for $(ng) genes at $(ns) spatial locations, which are laid out as follows: 
"""

# ╔═╡ ede08e4b-9d86-431d-832f-846c8a39dcaf
scatter(coord_mob.x, coord_mob.y)

# ╔═╡ fbf9f1b6-6c36-48fd-9c41-4edba8b8cbcd
begin
	nzperc = 0.8
	tf_col = vec(mean(Matrix(expr_mob) .> 0, dims=1)) .>= nzperc;
end;

# ╔═╡ 1a66b19d-b787-48f1-ab4e-3e091e08d434
md"We start by selecting genes that have non-zero counts in at least $(100*nzperc)% of the locations and then convert the data from the selected genes to log-scale. There are $(sum(tf_col)) such genes."

# ╔═╡ 86d098c4-5b49-4788-8e57-c78eda5ce839
genes = names(expr_mob)[tf_col];

# ╔═╡ e070cbee-746f-4afc-8ce8-f0172cd9490c
Y = Matrix(expr_mob)[:,tf_col];

# ╔═╡ 29d7d03b-1290-4556-95c2-8ddfb6aa3852
logY = log2.(Y .+ 1);

# ╔═╡ 470bcffb-cf9c-4a93-b4b6-2d9f293a86ba
md"""
The authors of the [SpatialDE paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6350895/) paper observed that gene expression profiles correlated with the total read count across cells:
"""

# ╔═╡ e6895e84-cf30-43fb-818e-0504d94bfee3
log_total_count = log.(sum(Y, dims=2));

# ╔═╡ 9d2d16e1-fb46-4318-a509-3da467dc9d7d
cc = vec(cor(logY, log_total_count));

# ╔═╡ 2fd75da8-9d8b-4fb2-809d-4c5c3b50a231
hist(cc)

# ╔═╡ d395baf9-f821-484a-b414-f7e08dd43862
md"""
In the [SpatialDE paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6350895/), the data `logY` is corrected by regressing each gene on `log_total_count` and considering the residuals as the input data for the downstream analysis. However, linear regression assumes independent samples, and the goal of our analysis is precisely to take into account spatial correlation. 

The correct approach is to treat `log_total_count` as a covariate or [fixed effect](https://en.wikipedia.org/wiki/Mixed_model#The_Fixed_Effect) in the Gaussian process analysis. In the [original software](https://github.com/Teichlab/SpatialDE), this is *not* possible, but in [SpatialOmicsGPs.jl](https://github.com/tmichoel/SpatialOmicsGPs.jl), it can be done. Hence we can keep the uncorrected `logY` data for now.

The [SpatialDE](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6350895/) method models the expression profile of a gene `y` (a column of `logY`) measured at spatial positions `x` as a sample from a multivariate normal distribution

```math
y \sim N\bigl(\mu + X\beta, \sigma^2_s K + \sigma^2_r I\bigr)
```

where ``\mu`` is a constant mean value, ``X`` is a matrix of (spatially variable) covariates (like `log_total_count`), ``\beta`` are the (fixed) effects of the covariates on `y`, ``K`` is a spatial covariance kernel of the form

```math
K_{ij} = e^{-\|x_i - x_j\|^2/\ell^2}
```

with ``\ell`` a lengthscale parameter, and ``\sigma^2_s`` and ``\sigma^2_r`` are spatial and residual variance parameters. The goal of our analysis is to find maximum-likelihood estimates of the parameters ``\mu``, ``\beta``, ``\ell``, ``\sigma^2_s``, and ``\sigma^2_r``. 

A gene's expression level is said to have spatial structure if ``\sigma^2_s\neq 0``, and this is tested by comparing the maximum log-likelihood of models fitted with and without a spatial kernel. The degree to which a gene's variance is explained by spatial structure is the *fraction of spatial variance*

```math
fsv = \frac{\sigma^2\mathrm{tr}(K)}{\sigma^2\mathrm{tr}(K) + n_s \sigma^2_r}
```

where ``n_s = \mathrm{tr}(I)`` is the number of samples. 

To find maximum-likelihood estimates for the parameters, the [SpatialDE](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6350895/) method first reparameterizes the model as

```math
y \sim N\bigl(\mu + X\beta, \sigma^2 (K_\ell + \delta I)\bigr)
```

where ``\sigma^2=\sigma^2_s`` and ``\delta=\sigma^2_r/\sigma^2_s``. Then kernel matrices ``K_\ell`` are computed for a grid of ``n=$(nl)`` values of ``\ell``.  The boundaries of the grid are by default set as the shortest observed distance between the spatial positions in `x`, divided by 2, and the longest observed distance multiplied by 2. For each ``K_\ell``, maximum-likelihood estimates for the variance parameters are obtained by the [FaST-LMM method](https://pubmed.ncbi.nlm.nih.gov/21892150/) and estimates for the mean ``\mu`` and fixed effects ``\beta`` given the optimal variance parameters can be found analytically. The optimal lengthscale is the value of ``\ell`` for which the likelihood (evaluated with the corresponding maximum-likelihood parameter estimates) is highest, and the final reported parameter estimates are the maximum-likelihood estimates at that value of ``\ell``.
"""

# ╔═╡ fa21375f-60c7-4e8d-bd5a-8de9c7acfe86
md"""
To use the [JuliaGPs](https://github.com/JuliaGaussianProcesses) packages, the spatial coordinates need to be in a special format:
"""

# ╔═╡ 12bc1478-9eec-4609-87c0-43a582159985
x = RowVecs(Matrix(coord_mob));

# ╔═╡ 57ca39a7-e293-4e70-8e06-88a76d820b50
md"Set the number of lengthscale values that will be evaluated:"

# ╔═╡ 0e3d7c48-e6b9-4d9f-8dad-87e469d86217
nl = 10;

# ╔═╡ f5775729-5d45-4bce-adf7-657e4ac860b2
md"The following function does parameter inference for the variance parameters for all genes as outlined above:"

# ╔═╡ 65dcf8ff-465e-46a2-ade3-690de45b8e2e
spatialde_mob = spatialDE(logY, x, nl; covariates=log_total_count, mean=true, names=genes)

# ╔═╡ 3e1228de-842d-40e5-930d-712a7739f35e
md"
In the input, `logY` is the matrix of expression values where columns are genes and rows are samples, `x` are the spatial locations of the samples, `nl` is the number of lengthscales to consider in the optimization. The optional argument `covariates` can be used to specify a matrix of covariates to correct for, and the optional argument `mean` specifies whether to fit an overall mean effect for each gene or not. The output is a dataframe containing for each gene the maximum-likelihood estimates for ``\sigma^2`` and ``\delta``, the `pvalue` for testing the hypothesis of non-zero spatial variance, the fraction of spatial variance (`fsv`), the maximum-likelihood value for the lengthscale ``\ell``, and the log-likelood attained at the maximum-likelihood parameters.
"

# ╔═╡ c452cd4e-ffda-419d-b838-856a13a9a273
md"
We can plot the fraction of spatial variance vs the p-value:
"

# ╔═╡ d6d6644b-86fa-41d0-b9a9-2251a178111e
scatter(1 ./(1. .+ spatialde_mob.δ),-log10.(spatialde_mob.pvalue))

# ╔═╡ e9c62437-f765-4d59-ac05-7d7ab12bc518
md"
We can also plot the spatial distribution of expression for a gene of interest by creating the appropriate kernel matrix given its maximum-likelihood parameters:
"

# ╔═╡ bf5678c8-2520-4b31-8b92-52b12176012b
gid = findall(spatialde_mob.gene .== "Nrgn")[1];

# ╔═╡ 79dccf12-f756-4efe-a7ab-13ce96d3e98e
kernel = with_lengthscale(SqExponentialKernel(), spatialde_mob.lengthscale[gid])

# ╔═╡ 7f06c0fb-a28b-4ae1-b3e0-7f2068215d58
K = kernelmatrix(kernel,x)

# ╔═╡ dd31b868-f823-415c-b967-fefad49dee1b
md"Given ``K`` and the maximum-likelihood parameters, we can compute the mean effect ``\mu`` and effect size ``\beta`` of the `total_log_count` and obtain the corrected expression level:"

# ╔═╡ cfbbb78b-ff6a-469a-9900-9cd89402e2c3
β = beta_mle_fullrank_lazy(logY[:,gid], K, log_total_count, spatialde_mob.σ²[gid], spatialde_mob.δ[gid]; mean=true)

# ╔═╡ 9047c24b-de97-498d-9e6c-9da00897a25f
yres = logY[:,gid] .- [ones(size(Y,1)) log_total_count] * β;

# ╔═╡ 724b1f77-04ca-4e91-b4ba-81d4ead41b89
scatter(coord_mob.x, coord_mob.y, color=yres, colormap = :viridis, markersize=35)

# ╔═╡ d1ab5d49-99bf-4f52-ae9a-4e59224fa47a
md"""
### Mouse hypothalamus data analysis

The olfactory bulb data consisted of RNA-sequencing counts of cells for a large number of $(ngm) genes collected at a relatively small number of $(nsm) spatial locations. The hypothalamus data in contrast is generated by the [MERFISH](https://en.wikipedia.org/wiki/Spatial_transcriptomics#MERFISH) technology and consists of a small number of $(ngh) genes measured at a large number of $(nsh) spatial locations. We perform the same SpatialDE analysis as before.
"""

# ╔═╡ 23fb0cca-11ca-49bd-8de6-26b1bdd586aa
md"First look at the layout of the spatial locations:"

# ╔═╡ a372f247-5201-4ee3-a2d1-8ed897069beb
scatter(coord_hyp.Centroid_X, coord_hyp.Centroid_Y)

# ╔═╡ c7e8a81f-6fdf-4071-a3b2-fd7ebc552f91
md"We now filter positions where too many genes are not expressed:"

# ╔═╡ f195e5f7-b459-4f9e-a86a-5eb9cbcdeaab
tf_row = vec(mean(Matrix(expr_hyp) .== 0, dims=2)) .< 0.5;

# ╔═╡ dcfc0183-c885-4173-acd7-fe3f1417a4b3
Yh = Matrix(expr_hyp[tf_row,:])

# ╔═╡ cc23b403-390f-4f21-9e93-33db0ae53a16
logYh = log2.(Yh .+ 1.);

# ╔═╡ 6e0a1ca2-9647-4625-b5c2-6fc83f63fe4f
hist(log2.(Y .+ 1)[:])

# ╔═╡ b6ca6ddf-2508-4695-88ba-0faefb1278be
log_total_expr = log.(sum(Yh, dims=2));

# ╔═╡ b7a9304d-6549-43c0-95ab-b839043751c1
cch = vec(cor(log_total_expr,logYh))

# ╔═╡ 47eefa8a-0315-4e58-85f6-238353388980
hist(cch)

# ╔═╡ 77dff5e4-f9a9-48be-851c-af3e0ae3843b
xh = RowVecs(Matrix(coord_hyp[tf_row,:]));

# ╔═╡ dd4b9fa2-51b3-4fe5-aaab-b9fed789e88b
spatialde_hyp = spatialDE(logYh, xh, nl; covariates=log_total_expr, mean=true, names=names(expr_hyp))

# ╔═╡ c985cd2f-dbb6-4e61-a7c9-e22839acd4d7
ip0 = spatialde_hyp.pvalue .> 0;

# ╔═╡ b36395af-61fa-402e-9b99-f16d3b4e5750
scatter(spatialde_hyp.fsv[ip0],-log10.(spatialde_hyp.pvalue[ip0]))

# ╔═╡ 77c95fce-f2fa-4c57-861e-a023eaab0dbb
names(expr_hyp)

# ╔═╡ afb16aea-f690-425d-8de4-3e8915b6ca1c
gidh = findall(spatialde_hyp.gene .== "Esr1")[1]

# ╔═╡ 299a689c-4035-44d0-8760-b3fc61bc1431
Kh = kernelmatrix(with_lengthscale(SqExponentialKernel(), spatialde_hyp.lengthscale[gidh]),xh)

# ╔═╡ e374a9f0-5d0d-4d2b-b5a7-d5b909a89af4
βh = beta_mle_fullrank_lazy(logYh[:,gidh], Kh, log_total_expr, spatialde_hyp.σ²[gidh], spatialde_hyp.δ[gidh]; mean=true)

# ╔═╡ f0d648fc-9bab-4d6c-b3b1-47ffecf6ca35
yresh = logYh[:,gidh] .- [ones(size(logYh,1)) log_total_expr] * β;

# ╔═╡ 1baba5b3-3c24-435f-8d41-887e9085b615
scatter(coord_hyp.Centroid_X, coord_hyp.Centroid_Y, color=yresh, colormap = :YlOrBr_9, markersize=9)

# ╔═╡ Cell order:
# ╟─8200f68d-ca32-48aa-ad91-900d25c40bd6
# ╠═afaa8b50-e927-11ee-2cdb-0f9d4bca6f43
# ╠═51d727e1-4227-46ca-abf7-38d404fc38ae
# ╠═e234d22e-ce9f-4635-90f5-1ce181b9dc2d
# ╟─d8fb1fbc-db6f-4b3e-b00c-1b868a56df75
# ╠═f19e865f-c104-4d77-b0df-57b06627177e
# ╟─e22b911d-5c61-4b2f-960c-473512a6e193
# ╠═189beda2-c089-4b75-873f-b8e41126d337
# ╠═f6eef619-d242-4c1b-b5b0-b12ca752aae9
# ╠═a250ec81-78f5-42d6-a697-9d18e60d6bf7
# ╠═da42b12d-1fed-4e3a-8fe0-5c36c416eb66
# ╠═b9704c0f-2e76-4f69-889a-d0ed3e6db01c
# ╠═cae5bfff-831e-4be5-894e-643f7c184f0d
# ╠═6fe8accc-c3b1-4856-afd1-803e53dd2dfe
# ╠═e250403d-a008-4f6a-89f7-cf321342331f
# ╠═dc34a5b0-9708-4377-9ad1-318d15012b58
# ╠═53a46965-76d5-4861-8a21-cd4b62c9c6d2
# ╟─037a650b-b487-4672-af39-7861c8beb4f2
# ╟─b95f323a-9621-45c9-a21d-3d8b1dd006e1
# ╟─8bc22fb8-a852-44f6-8ade-101bb300b5eb
# ╠═ede08e4b-9d86-431d-832f-846c8a39dcaf
# ╟─1a66b19d-b787-48f1-ab4e-3e091e08d434
# ╠═fbf9f1b6-6c36-48fd-9c41-4edba8b8cbcd
# ╠═86d098c4-5b49-4788-8e57-c78eda5ce839
# ╠═e070cbee-746f-4afc-8ce8-f0172cd9490c
# ╠═29d7d03b-1290-4556-95c2-8ddfb6aa3852
# ╟─470bcffb-cf9c-4a93-b4b6-2d9f293a86ba
# ╠═e6895e84-cf30-43fb-818e-0504d94bfee3
# ╠═9d2d16e1-fb46-4318-a509-3da467dc9d7d
# ╠═2fd75da8-9d8b-4fb2-809d-4c5c3b50a231
# ╟─d395baf9-f821-484a-b414-f7e08dd43862
# ╟─fa21375f-60c7-4e8d-bd5a-8de9c7acfe86
# ╠═12bc1478-9eec-4609-87c0-43a582159985
# ╟─57ca39a7-e293-4e70-8e06-88a76d820b50
# ╠═0e3d7c48-e6b9-4d9f-8dad-87e469d86217
# ╟─f5775729-5d45-4bce-adf7-657e4ac860b2
# ╠═65dcf8ff-465e-46a2-ade3-690de45b8e2e
# ╟─3e1228de-842d-40e5-930d-712a7739f35e
# ╟─c452cd4e-ffda-419d-b838-856a13a9a273
# ╠═d6d6644b-86fa-41d0-b9a9-2251a178111e
# ╟─e9c62437-f765-4d59-ac05-7d7ab12bc518
# ╠═bf5678c8-2520-4b31-8b92-52b12176012b
# ╠═79dccf12-f756-4efe-a7ab-13ce96d3e98e
# ╠═7f06c0fb-a28b-4ae1-b3e0-7f2068215d58
# ╟─dd31b868-f823-415c-b967-fefad49dee1b
# ╠═cfbbb78b-ff6a-469a-9900-9cd89402e2c3
# ╠═9047c24b-de97-498d-9e6c-9da00897a25f
# ╠═724b1f77-04ca-4e91-b4ba-81d4ead41b89
# ╟─d1ab5d49-99bf-4f52-ae9a-4e59224fa47a
# ╟─23fb0cca-11ca-49bd-8de6-26b1bdd586aa
# ╠═a372f247-5201-4ee3-a2d1-8ed897069beb
# ╟─c7e8a81f-6fdf-4071-a3b2-fd7ebc552f91
# ╠═f195e5f7-b459-4f9e-a86a-5eb9cbcdeaab
# ╠═dcfc0183-c885-4173-acd7-fe3f1417a4b3
# ╠═cc23b403-390f-4f21-9e93-33db0ae53a16
# ╠═6e0a1ca2-9647-4625-b5c2-6fc83f63fe4f
# ╠═b6ca6ddf-2508-4695-88ba-0faefb1278be
# ╠═b7a9304d-6549-43c0-95ab-b839043751c1
# ╠═47eefa8a-0315-4e58-85f6-238353388980
# ╠═77dff5e4-f9a9-48be-851c-af3e0ae3843b
# ╠═dd4b9fa2-51b3-4fe5-aaab-b9fed789e88b
# ╠═c985cd2f-dbb6-4e61-a7c9-e22839acd4d7
# ╠═b36395af-61fa-402e-9b99-f16d3b4e5750
# ╠═77c95fce-f2fa-4c57-861e-a023eaab0dbb
# ╠═afb16aea-f690-425d-8de4-3e8915b6ca1c
# ╠═299a689c-4035-44d0-8760-b3fc61bc1431
# ╠═e374a9f0-5d0d-4d2b-b5a7-d5b909a89af4
# ╠═f0d648fc-9bab-4d6c-b3b1-47ffecf6ca35
# ╠═1baba5b3-3c24-435f-8d41-887e9085b615
